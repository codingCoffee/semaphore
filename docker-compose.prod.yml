services:
  traefik:
    image: traefik:v3.4.1
    command:
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=shenoy.ameya@gmail.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt-data:/letsencrypt

  frontend:
    image: codingcoffee/semaphore
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sema.rule=Host(`semaphore.chat`)"
      - "traefik.http.routers.sema.entrypoints=websecure"
      - "traefik.http.routers.sema.tls.certresolver=myresolver"
      - "traefik.http.services.sema.loadbalancer.server.port=3000"
    ports:
      - "127.0.0.1:3000:3000"
    env_file:
      - ./frontend/.nextjs.env

  zero-cache:
    image: codingcoffee/semaphore-zero-cache
    build:
      context: ./frontend
      dockerfile: Dockerfile.zero-cache
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.zero.rule=Host(`zero.semaphore.chat`)"
      - "traefik.http.routers.zero.entrypoints=websecure"
      - "traefik.http.routers.zero.tls.certresolver=myresolver"
      - "traefik.http.services.zero.loadbalancer.server.port=4848"
    ports:
      - "127.0.0.1:4848:4848"
    env_file:
      - ./frontend/.zero-cache.env
    depends_on:
      - postgres

  whodb:
    image: clidey/whodb:0.55.0
    restart: unless-stopped
    env_file:
      - ./frontend/.whodb.env
    ports:
      - "127.0.0.1:8080:8080"
    depends_on:
      - postgres

  postgres:
    image: postgres:16.2-alpine
    shm_size: 1g
    restart: unless-stopped
    healthcheck:
      test: "pg_isready -U semaphore --dbname=semaphore"
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - ./frontend/.postgres.env
    command: |
      postgres
      -c wal_level=logical
      -c max_wal_senders=10
      -c max_replication_slots=5
      -c hot_standby=on
      -c hot_standby_feedback=on
    volumes:
      - ./postgres-data:/var/lib/postgresql/data/pgdata
